easyblock = 'Bundle'

name = 'EESSI-extend'
version = '2023.06'
# May have different ways to extend EESSI in future (manually, other tools,...)
versionsuffix = '-easybuild'

homepage = 'https://eessi.github.io/docs/'

description = """
 The goal of the European Environment for Scientific Software Installations
 (EESSI, pronounced as "easy") is to build a common stack of scientific
 software installations for HPC systems and beyond, including laptops,
 personal workstations and cloud infrastructure.

 This module allows you to extend EESSI using the same configuration for
 EasyBuild as EESSI itself uses. The default installation is the users
 home directory, but this can be overridden for a site installation (by setting
 EESSI_SITE_INSTALL) or for a direct installation under CVMFS (by setting
 EESSI_CVMFS_INSTALL). 
"""

toolchain = SYSTEM

# All the dependencies we filter in EESSI
local_deps_to_filter = "Autoconf,Automake,Autotools,binutils,bzip2,DBus,flex,gettext,gperf,help2man,intltool,libreadline,libtool,M4,makeinfo,ncurses,util-linux,XZ,zlib"
local_arch_specific_deps_to_filter = {'aarch64': ',yasm', 'x86_64': ''}
local_deps_to_filter += local_arch_specific_deps_to_filter[ARCH]

modextravars = {
    'EASYBUILD_FILTER_DEPS': local_deps_to_filter,
    'EASYBUILD_IGNORE_OSDEPS': '1',
    'EASYBUILD_DEBUG': '1',
    'EASYBUILD_TRACE': '1',
    'EASYBUILD_ZIP_LOGS': 'bzip2',
    'EASYBUILD_RPATH': '1',
    'EASYBUILD_FILTER_ENV_VARS': 'LD_LIBRARY_PATH',
    'EASYBUILD_READ_ONLY_INSTALLDIR': '1',
    'EASYBUILD_MODULE_EXTENSIONS': '1',
    'EASYBUILD_EXPERIMENTAL': '1',
}

# Need a few other variables, but they are more dynamic
# EASYBUILD_SYSROOT=${EPREFIX}
# EASYBUILD_PREFIX=${WORKDIR}/easybuild
# EASYBUILD_HOOKS=${EESSI_PREFIX}/init/easybuild/eb_hooks.py
# EASYBUILD_INSTALLPATH=${EESSI_PREFIX}/software/${EESSI_OS_TYPE}/${EESSI_SOFTWARE_SUBDIR}
# EASYBUILD_SOURCEPATH=${WORKDIR}/easybuild/sources:${EESSI_SOURCEPATH}
modluafooter = """
if (mode() == "load") then
  -- Use a working directory for temporary build files
  if (os.getenv("WORKING_DIR") == nil) then
    LmodMessage("-- Using /tmp/$USER as a temporary working directory for installations, you can override this by setting the environment variable WORKING_DIR and reloading the module (e.g., /dev/shm is a common option)")
  end
end
working_dir = os.getenv("WORKING_DIR") or pathJoin("/tmp", os.getenv("USER"))
-- Gather the EPREFIX to use as a sysroot
sysroot = os.getenv("EESSI_EPREFIX")
-- Use an installation prefix that we _should_ have write access to
if (os.getenv("EESSI_CVMFS_INSTALL") ~= nil) then
  easybuild_installpath = os.getenv("EESSI_SOFTWARE_PATH")
elseif (os.getenv("EESSI_SITE_INSTALL") ~= nil) then 
  easybuild_installpath = string.gsub(os.getenv("EESSI_SOFTWARE_PATH"), 'versions', 'host_injections')
else
  easybuild_installpath = string.gsub(os.getenv("EESSI_SOFTWARE_PATH"), os.getenv("EESSI_CVMFS_REPO"), pathJoin(os.getenv("HOME"), "eessi"))
end
if (mode() == "load") then
  LmodMessage("-- To create installations for EESSI, you _must_ have write permissions to " .. easybuild_installpath)
  -- Advise them to reuse sources
  if (os.getenv("EASYBUILD_SOURCEPATH") == nil) then
    LmodMessage("-- You may wish to configure a sources directory for EasyBuild (for example, via setting the environment variable EASYBUILD_SOURCEPATH) to allow you to reuse existing sources for packages.")
  end
end
-- Set the relevant environment variables for EasyBuild
setenv ("EASYBUILD_SYSROOT", sysroot)
setenv ("EASYBUILD_PREFIX", pathJoin(working_dir, "easybuild"))
setenv ("EASYBUILD_INSTALLPATH", easybuild_installpath)
setenv ("EASYBUILD_HOOKS", pathJoin(os.getenv("EESSI_PREFIX"), "init", "easybuild", "eb_hooks.py"))
if not ( isloaded("EasyBuild") ) then
    load("EasyBuild")
end
"""

moduleclass = 'devel'
